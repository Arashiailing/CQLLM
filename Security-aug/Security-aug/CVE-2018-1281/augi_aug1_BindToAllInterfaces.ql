/**
 * @name Binding a socket to all network interfaces
 * @description Binding a socket to all interfaces exposes it to traffic from any IPv4/IPv6 address,
 * creating significant security risks.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Provides all hostnames representing wildcard network interfaces */
private string getAllInterfacesHostname() {
  result in [
      // IPv4 wildcards
      "0.0.0.0", "",
      // IPv6 wildcards
      "::", "::0"
    ]
}

/** Tracks propagation of wildcard hostname references through data flow */
private DataFlow::TypeTrackingNode trackHostnameFlow(DataFlow::TypeTracker flowTracker, string wildcardHost) {
  flowTracker.start() and
  exists(StringLiteral hostLiteral | wildcardHost = getAllInterfacesHostname() |
    hostLiteral.getText() = wildcardHost and
    result.asExpr() = hostLiteral
  )
  or
  exists(DataFlow::TypeTracker previousTracker | 
    result = trackHostnameFlow(previousTracker, wildcardHost).track(previousTracker, flowTracker)
  )
}

/** Retrieves data flow nodes containing references to wildcard hostnames */
DataFlow::Node getHostnameNode(string wildcardHost) {
  trackHostnameFlow(DataFlow::TypeTracker::end(), wildcardHost).flowsTo(result)
}

/** Tracks propagation of address tuples containing wildcard hostnames */
private DataFlow::TypeTrackingNode trackAddressTupleFlow(DataFlow::TypeTracker flowTracker, string wildcardHost) {
  flowTracker.start() and
  result.asExpr() = any(Tuple addressTuple | 
    addressTuple.getElt(0) = getHostnameNode(wildcardHost).asExpr()
  )
  or
  exists(DataFlow::TypeTracker previousTracker | 
    result = trackAddressTupleFlow(previousTracker, wildcardHost).track(previousTracker, flowTracker)
  )
}

/** Retrieves data flow nodes containing address tuples with wildcard hostnames */
DataFlow::Node getAddressTupleNode(string wildcardHost) {
  trackAddressTupleFlow(DataFlow::TypeTracker::end(), wildcardHost).flowsTo(result)
}

/**
 * Provides socket instances created with specific address families.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode socketBindCall, DataFlow::Node addressArg, string wildcardHost
where
  socketBindCall = getSocketInstance().getMember("bind").getACall() and
  addressArg = socketBindCall.getArg(0) and
  addressArg = getAddressTupleNode(wildcardHost)
select socketBindCall.asExpr(), "Socket bound to all interfaces using '" + wildcardHost + "'."