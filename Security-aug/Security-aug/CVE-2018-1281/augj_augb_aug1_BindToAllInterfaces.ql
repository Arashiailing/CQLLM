/**
 * @name Socket binding to all network interfaces
 * @description Detects socket bindings using wildcard addresses that expose services to all network interfaces,
 * which can lead to unauthorized access and security vulnerabilities.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Defines all possible wildcard addresses representing universal network interfaces */
private string getWildcardAddress() {
  result in [
      // IPv4 wildcard addresses
      "0.0.0.0", "",
      // IPv6 wildcard addresses
      "::", "::0"
    ]
}

/** Tracks wildcard address values through data flow propagation */
private DataFlow::TypeTrackingNode trackAddressFlow(DataFlow::TypeTracker typeTracker, string wildcardValue) {
  typeTracker.start() and
  exists(StringLiteral addressLiteral | 
    wildcardValue = getWildcardAddress() and
    addressLiteral.getText() = wildcardValue and
    result.asExpr() = addressLiteral
  )
  or
  exists(DataFlow::TypeTracker previousTracker | 
    result = trackAddressFlow(previousTracker, wildcardValue).track(previousTracker, typeTracker)
  )
}

/** Retrieves data flow nodes containing wildcard address references */
DataFlow::Node getWildcardAddressNode(string wildcardValue) {
  trackAddressFlow(DataFlow::TypeTracker::end(), wildcardValue).flowsTo(result)
}

/** Propagates address tuples containing wildcard addresses in their first element */
private DataFlow::TypeTrackingNode propagateAddressTuple(DataFlow::TypeTracker typeTracker, string wildcardValue) {
  typeTracker.start() and
  exists(Tuple addrTuple | 
    addrTuple.getElt(0) = getWildcardAddressNode(wildcardValue).asExpr() and
    result.asExpr() = addrTuple
  )
  or
  exists(DataFlow::TypeTracker previousTracker | 
    result = propagateAddressTuple(previousTracker, wildcardValue).track(previousTracker, typeTracker)
  )
}

/** Retrieves data flow nodes containing address tuples with wildcard addresses */
DataFlow::Node getAddressTupleNode(string wildcardValue) {
  propagateAddressTuple(DataFlow::TypeTracker::end(), wildcardValue).flowsTo(result)
}

/**
 * Identifies socket object instances created with specific address families.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode socketBindCall, DataFlow::Node addressArgument, string wildcardValue
where
  socketBindCall = getSocketInstance().getMember("bind").getACall() and
  addressArgument = socketBindCall.getArg(0) and
  addressArgument = getAddressTupleNode(wildcardValue)
select socketBindCall.asExpr(), "Socket bound to all interfaces using '" + wildcardValue + "'."