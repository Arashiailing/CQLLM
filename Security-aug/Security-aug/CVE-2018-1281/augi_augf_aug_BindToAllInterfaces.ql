/**
 * @name Socket bound to all network interfaces
 * @description Binding a socket to all interfaces (0.0.0.0 or ::) exposes it to traffic from any IP,
 * creating potential security vulnerabilities.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Provides all string literals that represent binding to all network interfaces. */
private string getWildcardHost() {
  result in [
      // IPv4 wildcard addresses
      "0.0.0.0", "",
      // IPv6 wildcard addresses
      "::", "::0"
    ]
}

/** Tracks data flow of wildcard host references through the program. */
private DataFlow::TypeTrackingNode trackWildcardHostRef(DataFlow::TypeTracker tracker, string host) {
  exists(StringLiteral hostLiteral |
    host = getWildcardHost() and
    hostLiteral.getText() = host and
    tracker.start() and
    result.asExpr() = hostLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker |
    result = trackWildcardHostRef(prevTracker, host).track(prevTracker, tracker)
  )
}

/** Retrieves final nodes containing wildcard host references. */
DataFlow::Node getWildcardHostRef(string host) {
  trackWildcardHostRef(DataFlow::TypeTracker::end(), host).flowsTo(result)
}

/** Tracks data flow of tuples containing wildcard hosts as their first element. */
private DataFlow::TypeTrackingNode trackWildcardAddrTuple(DataFlow::TypeTracker tracker, string host) {
  exists(Tuple addrTuple |
    tracker.start() and
    addrTuple.getElt(0) = getWildcardHostRef(host).asExpr() and
    result.asExpr() = addrTuple
  )
  or
  exists(DataFlow::TypeTracker prevTracker |
    result = trackWildcardAddrTuple(prevTracker, host).track(prevTracker, tracker)
  )
}

/** Retrieves final nodes containing tuples with wildcard hosts as first element. */
DataFlow::Node getWildcardAddrTuple(string host) {
  trackWildcardAddrTuple(DataFlow::TypeTracker::end(), host).flowsTo(result)
}

/**
 * Obtains a `socket.socket` instance created with specific address family.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketObject() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindCallNode, DataFlow::Node addressArgNode, string host
where
  // Identify socket.bind() method invocations
  bindCallNode = getSocketObject().getMember("bind").getACall() and
  // Extract the address argument (first parameter)
  addressArgNode = bindCallNode.getArg(0) and
  // Verify address contains wildcard hostname
  addressArgNode = getWildcardAddrTuple(host)
select bindCallNode.asExpr(), "Socket bound to all interfaces using '" + host + "'"