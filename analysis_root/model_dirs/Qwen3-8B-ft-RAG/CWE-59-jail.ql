/** * @name Improper link resolution before file access ('Link Following') * @description Resolving links to files before checking if they are in the target directory *              may allow attackers to bypass directory restrictions. * @kind path-problem * @problem.severity error * @security-severity 7.5 * @precision medium * @id py/jail * @tags security *       external/cwe/cwe-040 *       external/cwe/cwe-022 *       external/cwe/cwe-023 *       external/cwe/cwe-073 *       external/cwe/cwe-099 */import pythonimport semmle.python.security.dataflow.PathInjectionQueryimport PathInjectionFlow::PathGraph/** * 检测在文件访问前不安全地解析符号链接的操作 * 这种行为可能导致目录穿越攻击，使攻击者绕过预期的安全限制 */from PathInjectionFlow::PathNode source, PathInjectionFlow::PathNode sink, File targetFilewhere  // 条件1：汇节点必须是文件访问操作  sink.getNode().(ApiCallNode).getFunction().getId() = "open" and  // 条件2：文件对象必须与汇节点关联  targetFile = sink.getNode().(ApiCallNode).getArg(0).(ImmutableLiteral).asExpr() and  // 条件3：存在从源节点到汇节点的数据流路径  PathInjectionFlow::flowPath(source, sink) and  // 条件4：文件路径必须不包含当前工作目录  not PathInjectionFlow::noFlowPath(source, sink, targetFile)select  // 选择要报告的结果，包括文件访问节点、源节点、汇节点以及警告信息  sink.getNode(), source, sink, "Call to $@ with a path that starts at '" +  targetFile + "'.",  source.getNode(), "user-supplied value"