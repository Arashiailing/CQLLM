/**
 * @name Socket bound to all network interfaces
 * @description Detects sockets bound to all network interfaces (0.0.0.0, ::, etc.),
 * which exposes services to all network traffic and creates significant security risks.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Defines all wildcard addresses representing all network interfaces */
private string getWildcardAddress() {
  result in [
      // IPv4 wildcards
      "0.0.0.0", "",
      // IPv6 wildcards
      "::", "::0"
    ]
}

/**
 * Tracks wildcard address propagation through data flow.
 * Handles both literal values and propagated references.
 */
private DataFlow::TypeTrackingNode trackWildcardAddress(DataFlow::TypeTracker t, string wildcard) {
  // Base case: Match literal wildcard addresses
  t.start() and
  exists(StringLiteral addrLiteral | 
    wildcard = getWildcardAddress() and
    addrLiteral.getText() = wildcard and
    result.asExpr() = addrLiteral
  )
  or
  // Recursive case: Track through data flow
  exists(DataFlow::TypeTracker prev | 
    result = trackWildcardAddress(prev, wildcard).track(prev, t)
  )
}

/** Retrieves data flow nodes containing wildcard address references */
DataFlow::Node getWildcardNode(string wildcard) {
  trackWildcardAddress(DataFlow::TypeTracker::end(), wildcard).flowsTo(result)
}

/**
 * Tracks address tuples containing wildcard addresses as first element.
 * Handles both direct tuples and propagated references.
 */
private DataFlow::TypeTrackingNode trackWildcardTuple(DataFlow::TypeTracker t, string wildcard) {
  // Base case: Match tuples with wildcard at first position
  t.start() and
  exists(Tuple addrTuple | 
    addrTuple.getElt(0) = getWildcardNode(wildcard).asExpr() and
    result.asExpr() = addrTuple
  )
  or
  // Recursive case: Track through data flow
  exists(DataFlow::TypeTracker prev | 
    result = trackWildcardTuple(prev, wildcard).track(prev, t)
  )
}

/** Retrieves data flow nodes containing address tuples with wildcard addresses */
DataFlow::Node getWildcardTupleNode(string wildcard) {
  trackWildcardTuple(DataFlow::TypeTracker::end(), wildcard).flowsTo(result)
}

/**
 * Identifies socket creation nodes for specific address families.
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketCreationNode() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindCall, DataFlow::Node addressArg, string wildcard
where
  // Match socket.bind() calls
  bindCall = getSocketCreationNode().getMember("bind").getACall() and
  // First argument is the address tuple
  addressArg = bindCall.getArg(0) and
  // Address tuple contains wildcard address
  addressArg = getWildcardTupleNode(wildcard)
select bindCall.asExpr(), "Socket bound to all interfaces using '" + wildcard + "'."