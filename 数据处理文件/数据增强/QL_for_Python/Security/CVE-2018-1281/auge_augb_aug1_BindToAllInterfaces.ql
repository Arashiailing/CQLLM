/**
 * @name Socket bound to all network interfaces
 * @description Binding a socket to all network interfaces exposes it to traffic from any IP address,
 * creating significant security risks by allowing unrestricted network access.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Defines all wildcard addresses representing all network interfaces */
private string getWildcardAddress() {
  result in [
      // IPv4 wildcards
      "0.0.0.0", "",
      // IPv6 wildcards
      "::", "::0"
    ]
}

/** Tracks wildcard address references through data flow propagation */
private DataFlow::TypeTrackingNode propagateWildcardAddress(DataFlow::TypeTracker tracker, string wildcardAddr) {
  tracker.start() and
  exists(StringLiteral addrLiteral | 
    wildcardAddr = getWildcardAddress() and
    addrLiteral.getText() = wildcardAddr and
    result.asExpr() = addrLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = propagateWildcardAddress(prevTracker, wildcardAddr).track(prevTracker, tracker)
  )
}

/** Retrieves data flow nodes containing wildcard address references */
DataFlow::Node getWildcardAddressNode(string wildcardAddr) {
  propagateWildcardAddress(DataFlow::TypeTracker::end(), wildcardAddr).flowsTo(result)
}

/** Tracks address tuples containing wildcard addresses as first element */
private DataFlow::TypeTrackingNode propagateAddressTupleWithWildcard(DataFlow::TypeTracker tracker, string wildcardAddr) {
  tracker.start() and
  exists(Tuple addrTuple | 
    addrTuple.getElt(0) = getWildcardAddressNode(wildcardAddr).asExpr() and
    result.asExpr() = addrTuple
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = propagateAddressTupleWithWildcard(prevTracker, wildcardAddr).track(prevTracker, tracker)
  )
}

/** Retrieves data flow nodes containing address tuples with wildcard addresses */
DataFlow::Node getAddressTupleNodeWithWildcard(string wildcardAddr) {
  propagateAddressTupleWithWildcard(DataFlow::TypeTracker::end(), wildcardAddr).flowsTo(result)
}

/**
 * Identifies socket creation nodes for specific address families.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketCreationNode() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindCall, DataFlow::Node addressArg, string wildcardAddr
where
  bindCall = getSocketCreationNode().getMember("bind").getACall() and
  addressArg = bindCall.getArg(0) and
  addressArg = getAddressTupleNodeWithWildcard(wildcardAddr)
select bindCall.asExpr(), "Socket bound to all interfaces using '" + wildcardAddr + "'."