/**
 * @name Socket bound to all network interfaces
 * @description Binding a socket to all interfaces (0.0.0.0 or ::) exposes it to traffic from any IP,
 * creating potential security vulnerabilities.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Returns all possible string representations binding to all network interfaces. */
private string getAllInterfacesHost() {
  result in [
      // IPv4 representations
      "0.0.0.0", "",
      // IPv6 representations
      "::", "::0"
    ]
}

/** Tracks references to hostnames that bind to all interfaces through data flow. */
private DataFlow::TypeTrackingNode getAllInterfacesHostRef(DataFlow::TypeTracker tracker, string host) {
  exists(StringLiteral hostLiteral |
    host = getAllInterfacesHost() and
    hostLiteral.getText() = host and
    tracker.start() and
    result.asExpr() = hostLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker |
    result = getAllInterfacesHostRef(prevTracker, host).track(prevTracker, tracker)
  )
}

/** Gets final nodes containing references to all-interfaces hostnames. */
DataFlow::Node getAllInterfacesHostRef(string host) {
  getAllInterfacesHostRef(DataFlow::TypeTracker::end(), host).flowsTo(result)
}

/** Tracks tuples containing all-interfaces hostnames as their first element. */
private DataFlow::TypeTrackingNode getAllInterfacesAddrTuple(DataFlow::TypeTracker tracker, string host) {
  exists(Tuple addressTuple |
    tracker.start() and
    addressTuple.getElt(0) = getAllInterfacesHostRef(host).asExpr() and
    result.asExpr() = addressTuple
  )
  or
  exists(DataFlow::TypeTracker prevTracker |
    result = getAllInterfacesAddrTuple(prevTracker, host).track(prevTracker, tracker)
  )
}

/** Gets final nodes containing tuples with all-interfaces hostnames as first element. */
DataFlow::Node getAllInterfacesAddrTuple(string host) {
  getAllInterfacesAddrTuple(DataFlow::TypeTracker::end(), host).flowsTo(result)
}

/**
 * Gets a `socket.socket` instance created with specific address family.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode socketBindCall, DataFlow::Node bindAddressArg, string host
where
  // Identify socket.bind() method calls
  socketBindCall = getSocketInstance().getMember("bind").getACall() and
  // Extract first argument (address parameter)
  bindAddressArg = socketBindCall.getArg(0) and
  // Verify address contains all-interfaces hostname
  bindAddressArg = getAllInterfacesAddrTuple(host)
select socketBindCall.asExpr(), "Socket bound to all interfaces using '" + host + "'"