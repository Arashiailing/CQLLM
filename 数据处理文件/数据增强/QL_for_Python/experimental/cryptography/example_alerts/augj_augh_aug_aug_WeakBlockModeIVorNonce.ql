/**
 * @name Weak block mode IV or nonce
 * @description Identifies weak initialization vectors (IVs) or nonces in block cipher operations.
 *              Flags cases where IVs/nonces are missing or not generated by os.urandom.
 *              Excludes Fernet (handled internally) and requires manual review for complex cases.
 *
 *            NOTE: This simplified query flags any IV/nonce not from os.urandom or undetermined origin.
 *                  Nuanced patterns (e.g., GCM nonce usage) require expert review. Functions inferring
 *                  both mode and IV may trigger false positives (handled via suppression). Fernet is
 *                  explicitly excluded due to internal os.urandom usage.
 * @id py/weak-block-mode-iv-or-nonce
 * @kind problem
 * @problem.severity error
 * @precision high
 */

import python
import experimental.cryptography.Concepts

// Identify block cipher operations with weak IV/nonce configurations
from BlockMode blockCipherOp, string warningMessage, DataFlow::Node sourceNode
where
  // Exclude Fernet (handles IV generation internally)
  not blockCipherOp instanceof CryptographyModule::Encryption::SymmetricEncryption::Fernet::CryptographyFernet
  and
  (
    // Case 1: Missing IV/nonce
    not blockCipherOp.hasIVorNonce()
    and
    sourceNode = blockCipherOp
    and
    warningMessage = "Block mode is missing IV/Nonce initialization: $@"
    or
    // Case 2: IV/nonce from insecure source
    blockCipherOp.hasIVorNonce()
    and
    not API::moduleImport("os").getMember("urandom").getACall() = blockCipherOp.getIVorNonce()
    and
    sourceNode = blockCipherOp.getIVorNonce()
    and
    warningMessage = "Block mode is not using an accepted IV/Nonce initialization: $@"
  )
select blockCipherOp, warningMessage, sourceNode, sourceNode.toString()