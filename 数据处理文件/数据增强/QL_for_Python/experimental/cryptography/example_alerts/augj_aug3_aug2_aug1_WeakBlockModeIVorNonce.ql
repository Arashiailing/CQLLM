/**
 * @name Weak block mode IV or nonce
 * @description Identifies cryptographic operations using block modes with weak, obsolete, or otherwise
 *              unacceptable initialization vectors (IVs) or nonces. Specifically targets cases where
 *              IVs or nonces are not generated by a cryptographically secure random number generator.
 *
 *            NOTE: For analysis simplicity, any IV or nonce that cannot be verified as originating
 *                  from os.urandom is flagged. More nuanced considerations, such as proper nonce usage
 *                  in specific modes, are not currently handled. For example, GCM mode requires a
 *                  nonce; while using urandom is acceptable, incorrect configuration is still possible.
 *                  We assume GCM mode issues are caught by a separate query and require crypto board review.
 *
 *                  Additionally, functions that infer both mode and IV may be flagged by this query.
 *                  Currently, we rely on users suppressing these cases rather than filtering them out.
 *                  Fernet is explicitly excluded as its implementation properly uses os.urandom.
 * @id py/weak-block-mode-iv-or-nonce
 * @kind problem
 * @problem.severity error
 * @precision high
 */

import python
import experimental.cryptography.Concepts

// Define variables for cryptographic operation, diagnostic message, and problematic code location
from BlockMode encryptionOperation, string diagnosticMessage, DataFlow::Node vulnerableCodeLocation
where
  // Exclude Fernet encryption as it properly handles IV/Nonce internally
  not encryptionOperation instanceof CryptographyModule::Encryption::SymmetricEncryption::Fernet::CryptographyFernet and
  
  // Check for IV/Nonce security issues
  (
    // Case 1: Operation lacks IV/Nonce entirely
    not encryptionOperation.hasIVorNonce()
    or
    // Case 2: Operation uses IV/Nonce not from os.urandom
    not API::moduleImport("os").getMember("urandom").getACall() = encryptionOperation.getIVorNonce()
  ) and
  
  // Set diagnostic message
  diagnosticMessage = "Block mode is not using an accepted IV/Nonce initialization: $@" and
  
  // Identify vulnerable code location based on the specific issue
  (
    // If operation lacks IV/Nonce, mark the operation itself as vulnerable
    not encryptionOperation.hasIVorNonce() and vulnerableCodeLocation = encryptionOperation
    or
    // If operation has IV/Nonce but it's insecure, mark the IV/Nonce source as vulnerable
    encryptionOperation.hasIVorNonce() and vulnerableCodeLocation = encryptionOperation.getIVorNonce()
  )
select encryptionOperation, diagnosticMessage, vulnerableCodeLocation, vulnerableCodeLocation.toString()