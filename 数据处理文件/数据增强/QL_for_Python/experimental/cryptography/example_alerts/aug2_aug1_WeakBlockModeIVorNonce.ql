/**
 * @name Weak block mode IV or nonce
 * @description Identifies cryptographic operations using block modes with weak, obsolete, or otherwise
 *              unacceptable initialization vectors (IVs) or nonces. Specifically targets cases where
 *              IVs or nonces are not generated by a cryptographically secure random number generator.
 *
 *            NOTE: For analysis simplicity, any IV or nonce that cannot be verified as originating
 *                  from os.urandom is flagged. More nuanced considerations, such as proper nonce usage
 *                  in specific modes, are not currently handled. For example, GCM mode requires a
 *                  nonce; while using urandom is acceptable, incorrect configuration is still possible.
 *                  We assume GCM mode issues are caught by a separate query and require crypto board review.
 *
 *                  Additionally, functions that infer both mode and IV may be flagged by this query.
 *                  Currently, we rely on users suppressing these cases rather than filtering them out.
 *                  Fernet is explicitly excluded as its implementation properly uses os.urandom.
 * @id py/weak-block-mode-iv-or-nonce
 * @kind problem
 * @problem.severity error
 * @precision high
 */

import python
import experimental.cryptography.Concepts

// Define variables for cryptographic operation, diagnostic message, and problematic code location
from BlockMode cipherOperation, string alertMessage, DataFlow::Node vulnerableNode
where
  // Exclude Fernet encryption as it internally uses os.urandom
  not cipherOperation instanceof CryptographyModule::Encryption::SymmetricEncryption::Fernet::CryptographyFernet and
  (
    // Check if operation lacks IV/Nonce or uses one not from os.urandom
    not cipherOperation.hasIVorNonce() or
    not API::moduleImport("os").getMember("urandom").getACall() = cipherOperation.getIVorNonce()
  ) and
  (
    // Set appropriate message and node based on IV/Nonce presence
    if not cipherOperation.hasIVorNonce()
    then (
      vulnerableNode = cipherOperation and 
      alertMessage = "Block mode is missing IV/Nonce initialization."
    )
    else (
      vulnerableNode = cipherOperation.getIVorNonce()
    )
  ) and
  // Finalize error message with details about the unacceptable initialization
  alertMessage = "Block mode is not using an accepted IV/Nonce initialization: $@"
select cipherOperation, alertMessage, vulnerableNode, vulnerableNode.toString()