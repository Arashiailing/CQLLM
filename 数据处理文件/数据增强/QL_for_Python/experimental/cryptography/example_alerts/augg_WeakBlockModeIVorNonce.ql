/**
 * @name Weak block mode IV or nonce
 * @description Detects initialization vectors or nonces used in block modes that are weak, obsolete, or unaccepted.
 *              Specifically identifies IVs/nonces not generated by cryptographically secure random number generators.
 * 
 *              NOTE: For simplicity, any IV/nonce not explicitly generated by os.urandom is flagged.
 *                    Special cases like GCM nonce requirements or Fernet's internal urandom usage are handled as follows:
 *                    - GCM is assumed to be flagged by a separate query (crypto board review required)
 *                    - Fernet is explicitly excluded since it internally uses os.urandom
 *                    - Functions inferring mode/IV may be flagged (user suppression required)
 * @id py/weak-block-mode-iv-or-nonce
 * @kind problem
 * @problem.severity error
 * @precision high
 */

import python
import experimental.cryptography.Concepts

from BlockMode blockModeOperation, string message, DataFlow::Node configurationNode
where
  // Exclude Fernet encryption instances (handled internally)
  not blockModeOperation instanceof CryptographyModule::Encryption::SymmetricEncryption::Fernet::CryptographyFernet and
  
  // Check for missing IV/nonce or non-urandom generated IV/nonce
  (
    not blockModeOperation.hasIVorNonce() or
    not API::moduleImport("os").getMember("urandom").getACall() = blockModeOperation.getIVorNonce()
  ) and
  
  // Determine configuration node based on IV/nonce presence
  (
    if not blockModeOperation.hasIVorNonce()
    then configurationNode = blockModeOperation  // Operation itself when missing
    else configurationNode = blockModeOperation.getIVorNonce()  // Actual IV/nonce node
  ) and
  
  // Standardized warning message
  message = "Block mode is not using an accepted IV/Nonce initialization: $@"
select blockModeOperation, message, configurationNode, configurationNode.toString()