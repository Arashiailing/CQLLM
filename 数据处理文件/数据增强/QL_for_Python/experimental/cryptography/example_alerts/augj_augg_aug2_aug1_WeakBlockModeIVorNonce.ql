/**
 * @name Weak block mode IV or nonce
 * @description Identifies cryptographic operations using block modes with weak, obsolete, or
 *              unacceptable initialization vectors (IVs) or nonces. This query specifically
 *              targets scenarios where IVs/nonces aren't generated by cryptographically secure
 *              random number generators.
 *              
 *            NOTE: For analysis simplicity, any IV/nonce not verifiably from os.urandom is flagged.
 *                  Nuanced considerations (e.g., proper nonce usage in specific modes) aren't handled.
 *                  For example, GCM mode requires a nonce; while urandom is acceptable, incorrect
 *                  configuration is possible. We assume GCM issues are caught by separate queries
 *                  requiring crypto board review.
 *                  
 *                  Functions inferring both mode and IV may be flagged. We rely on users suppressing
 *                  these cases rather than filtering them. Fernet is explicitly excluded as its
 *                  implementation properly uses os.urandom.
 * @id py/weak-block-mode-iv-or-nonce
 * @kind problem
 * @problem.severity error
 * @precision high
 */

import python
import experimental.cryptography.Concepts

// Define variables for cryptographic operation, diagnostic message, and vulnerable code location
from BlockMode cryptoOp, string alertMessage, DataFlow::Node vulnerableNode
where
  // Exclude Fernet encryption (internally uses os.urandom)
  not cryptoOp instanceof CryptographyModule::Encryption::SymmetricEncryption::Fernet::CryptographyFernet
  
  // Check for missing IV/Nonce or non-urandom source
  and (
    not cryptoOp.hasIVorNonce()
    or
    not API::moduleImport("os").getMember("urandom").getACall() = cryptoOp.getIVorNonce()
  )
  
  // Set alert message and identify vulnerable node
  and (
    // Case 1: Missing IV/Nonce initialization
    if not cryptoOp.hasIVorNonce()
    then (
      vulnerableNode = cryptoOp and 
      alertMessage = "Block mode is missing IV/Nonce initialization."
    )
    // Case 2: IV/Nonce from unacceptable source
    else (
      vulnerableNode = cryptoOp.getIVorNonce()
    )
  )
  
  // Finalize alert message with vulnerability details
  and alertMessage = "Block mode is not using an accepted IV/Nonce initialization: $@"

select cryptoOp, alertMessage, vulnerableNode, vulnerableNode.toString()