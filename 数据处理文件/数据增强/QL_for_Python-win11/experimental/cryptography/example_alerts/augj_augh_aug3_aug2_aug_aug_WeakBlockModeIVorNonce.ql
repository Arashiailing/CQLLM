/**
 * @name Weak block mode IV or nonce
 * @description Detects insecure initialization vectors (IVs) or nonces in block cipher operations.
 *              Identifies cases where IVs/nonces are either missing or not generated by os.urandom.
 *              Excludes Fernet as it handles IV generation internally. Complex cases may require
 *              manual verification.
 *
 * @id py/weak-block-mode-iv-or-nonce
 * @kind problem
 * @problem.severity error
 * @precision high
 * @tags security
 *       cryptography
 */

import python
import experimental.cryptography.Concepts

// Identify block cipher operations with vulnerable IV/nonce configurations
from BlockMode cipherOperation, string alertMessage, DataFlow::Node vulnerabilitySource
where
  // Exclude Fernet (manages IV generation internally)
  not cipherOperation instanceof CryptographyModule::Encryption::SymmetricEncryption::Fernet::CryptographyFernet and
  (
    // Check for missing IV/nonce OR non-os.urandom source
    not cipherOperation.hasIVorNonce() or
    not API::moduleImport("os").getMember("urandom").getACall() = cipherOperation.getIVorNonce()
  ) and
  // Determine vulnerability source based on IV/nonce presence
  (
    if not cipherOperation.hasIVorNonce()
    then vulnerabilitySource = cipherOperation  // Case 1: Missing IV/nonce
    else vulnerabilitySource = cipherOperation.getIVorNonce()  // Case 2: Insecure IV/nonce source
  ) and
  // Standardize final alert message
  alertMessage = "Block mode is not using an accepted IV/Nonce initialization: $@"
select cipherOperation, alertMessage, vulnerabilitySource, vulnerabilitySource.toString()