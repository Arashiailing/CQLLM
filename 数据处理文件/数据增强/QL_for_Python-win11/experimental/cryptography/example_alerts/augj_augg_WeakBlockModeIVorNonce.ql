/**
 * @name Weak block mode IV or nonce
 * @description Identifies block mode operations using weak initialization vectors (IV) or nonces,
 *              specifically those not generated by cryptographically secure random number generators.
 *              Excludes Fernet encryption which internally uses os.urandom.
 *              Flags operations with missing IV/nonce or non-urandom generated IV/nonce.
 * @id py/weak-block-mode-iv-or-nonce
 * @kind problem
 * @problem.severity error
 * @precision high
 */

import python
import experimental.cryptography.Concepts

from BlockMode blockModeInstance, string alertMsg, DataFlow::Node problematicNode
where
  // Exclude Fernet encryption (handles IV internally)
  not blockModeInstance instanceof CryptographyModule::Encryption::SymmetricEncryption::Fernet::CryptographyFernet and
  
  // Check IV/nonce validity: missing or not from os.urandom
  (
    not blockModeInstance.hasIVorNonce() or
    not API::moduleImport("os").getMember("urandom").getACall() = blockModeInstance.getIVorNonce()
  ) and
  
  // Determine problematic node based on IV/nonce presence
  (
    if not blockModeInstance.hasIVorNonce()
    then problematicNode = blockModeInstance  // Operation itself when IV missing
    else problematicNode = blockModeInstance.getIVorNonce()  // Actual IV node when present
  ) and
  
  // Standardized alert message
  alertMsg = "Block mode is not using an accepted IV/Nonce initialization: $@"
select blockModeInstance, alertMsg, problematicNode, problematicNode.toString()