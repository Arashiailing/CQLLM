/**
 * @name Socket bound to all network interfaces
 * @description Identifies socket bindings to all network interfaces (0.0.0.0, ::, etc.),
 * which exposes services to all network traffic and creates security risks.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Returns hostnames representing all network interfaces. */
private string getWildcardHost() {
  result in [
      // IPv4 wildcards
      "0.0.0.0", "",
      // IPv6 wildcards
      "::", "::0"
    ]
}

/** Tracks data flow of wildcard hostnames through the program. */
private DataFlow::TypeTrackingNode trackWildcardHostFlow(DataFlow::TypeTracker tracker, string wildcardHost) {
  exists(StringLiteral hostLiteral |
    wildcardHost = getWildcardHost() and
    hostLiteral.getText() = wildcardHost and
    tracker.start() and
    result.asExpr() = hostLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker |
    result = trackWildcardHostFlow(prevTracker, wildcardHost).track(prevTracker, tracker)
  )
}

/** Gets nodes referencing wildcard hostnames. */
DataFlow::Node getWildcardHostRef(string wildcardHost) {
  trackWildcardHostFlow(DataFlow::TypeTracker::end(), wildcardHost).flowsTo(result)
}

/** Tracks tuples containing wildcard hostnames as first element. */
private DataFlow::TypeTrackingNode trackWildcardAddressTuple(DataFlow::TypeTracker tracker, string wildcardHost) {
  exists(Tuple addressTuple |
    tracker.start() and
    addressTuple.getElt(0) = getWildcardHostRef(wildcardHost).asExpr() and
    result.asExpr() = addressTuple
  )
  or
  exists(DataFlow::TypeTracker prevTracker |
    result = trackWildcardAddressTuple(prevTracker, wildcardHost).track(prevTracker, tracker)
  )
}

/** Gets tuples containing wildcard hostnames as first element. */
DataFlow::Node getWildcardAddressTuple(string wildcardHost) {
  trackWildcardAddressTuple(DataFlow::TypeTracker::end(), wildcardHost).flowsTo(result)
}

/**
 * Gets a `socket.socket` instance created with specific address family.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindCall, DataFlow::Node addressArg, string wildcardHost
where
  // Identify socket.bind() method calls
  bindCall = getSocketInstance().getMember("bind").getACall() and
  // Extract first argument (address parameter)
  addressArg = bindCall.getArg(0) and
  // Verify address contains wildcard hostname
  addressArg = getWildcardAddressTuple(wildcardHost)
select bindCall.asExpr(), "Socket bound to all interfaces using '" + wildcardHost + "'"