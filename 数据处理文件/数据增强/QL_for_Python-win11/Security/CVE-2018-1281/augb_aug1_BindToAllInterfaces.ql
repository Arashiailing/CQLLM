/**
 * @name Binding a socket to all network interfaces
 * @description Binding a socket to all interfaces exposes it to traffic from any IPv4/IPv6 address,
 * creating significant security risks.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Defines all possible wildcard hostnames representing all network interfaces */
private string getWildcardHostname() {
  result in [
      // IPv4 wildcards
      "0.0.0.0", "",
      // IPv6 wildcards
      "::", "::0"
    ]
}

/** Propagates wildcard hostname references through data flow */
private DataFlow::TypeTrackingNode propagateHostnameReference(DataFlow::TypeTracker tracker, string wildcardHost) {
  tracker.start() and
  exists(StringLiteral hostnameLiteral | 
    wildcardHost = getWildcardHostname() and
    hostnameLiteral.getText() = wildcardHost and
    result.asExpr() = hostnameLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = propagateHostnameReference(prevTracker, wildcardHost).track(prevTracker, tracker)
  )
}

/** Retrieves data flow nodes containing wildcard hostname references */
DataFlow::Node getHostnameNode(string wildcardHost) {
  propagateHostnameReference(DataFlow::TypeTracker::end(), wildcardHost).flowsTo(result)
}

/** Tracks address tuples where the first element is a wildcard hostname */
private DataFlow::TypeTrackingNode propagateAddressTuple(DataFlow::TypeTracker tracker, string wildcardHost) {
  tracker.start() and
  exists(Tuple addressTuple | 
    addressTuple.getElt(0) = getHostnameNode(wildcardHost).asExpr() and
    result.asExpr() = addressTuple
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = propagateAddressTuple(prevTracker, wildcardHost).track(prevTracker, tracker)
  )
}

/** Retrieves data flow nodes containing address tuples with wildcard hostnames */
DataFlow::Node getAddressTupleNode(string wildcardHost) {
  propagateAddressTuple(DataFlow::TypeTracker::end(), wildcardHost).flowsTo(result)
}

/**
 * Identifies socket instances created with specific address families.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindCall, DataFlow::Node addressArg, string wildcardHost
where
  bindCall = getSocketInstance().getMember("bind").getACall() and
  addressArg = bindCall.getArg(0) and
  addressArg = getAddressTupleNode(wildcardHost)
select bindCall.asExpr(), "Socket bound to all interfaces using '" + wildcardHost + "'."