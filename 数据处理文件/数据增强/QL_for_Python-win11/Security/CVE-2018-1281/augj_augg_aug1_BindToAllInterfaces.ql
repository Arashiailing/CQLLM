/**
 * @name Binding a socket to all network interfaces
 * @description Detects when a socket is bound to all network interfaces, which exposes it to traffic from any IPv4/IPv6 address,
 * posing significant security risks.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Defines all possible wildcard addresses that indicate binding to all network interfaces */
private string isWildcardAddress() {
  result in [
      // IPv4 wildcard addresses
      "0.0.0.0", "",
      // IPv6 wildcard addresses
      "::", "::0"
    ]
}

/** Tracks the flow of wildcard address references through type propagation */
private DataFlow::TypeTrackingNode wildcardAddressFlow(DataFlow::TypeTracker tracker, string addr) {
  tracker.start() and
  exists(StringLiteral addrLiteral | addr = isWildcardAddress() |
    addrLiteral.getText() = addr and
    result.asExpr() = addrLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = wildcardAddressFlow(prevTracker, addr).track(prevTracker, tracker)
  )
}

/** Obtains data flow nodes containing wildcard address references */
DataFlow::Node wildcardAddressNode(string addr) {
  wildcardAddressFlow(DataFlow::TypeTracker::end(), addr).flowsTo(result)
}

/** Tracks address tuples containing wildcard addresses as their first element */
private DataFlow::TypeTrackingNode addressTupleWithWildcardFlow(DataFlow::TypeTracker tracker, string addr) {
  tracker.start() and
  result.asExpr() = any(Tuple addrTuple | 
    addrTuple.getElt(0) = wildcardAddressNode(addr).asExpr()
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = addressTupleWithWildcardFlow(prevTracker, addr).track(prevTracker, tracker)
  )
}

/** Obtains data flow nodes containing address tuples with wildcard addresses */
DataFlow::Node addressTupleWithWildcardNode(string addr) {
  addressTupleWithWildcardFlow(DataFlow::TypeTracker::end(), addr).flowsTo(result)
}

/**
 * Retrieves socket instances created with specific address families.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node socketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindOperation, DataFlow::Node addrParam, string wildcardAddr
where
  bindOperation = socketInstance().getMember("bind").getACall() and
  addrParam = bindOperation.getArg(0) and
  addrParam = addressTupleWithWildcardNode(wildcardAddr)
select bindOperation.asExpr(), "Socket bound to all interfaces using '" + wildcardAddr + "'."