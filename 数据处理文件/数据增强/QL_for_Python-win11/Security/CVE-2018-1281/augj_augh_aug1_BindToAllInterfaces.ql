/**
 * @name Socket binding to all network interfaces
 * @description Detects socket configurations bound to all network interfaces (0.0.0.0, ::, etc.),
 * which exposes services to any network source and creates significant security vulnerabilities.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Defines wildcard host patterns that represent all network interfaces */
private string getWildcardHostPattern() {
  result in [
      // IPv4 wildcard patterns
      "0.0.0.0", "",
      // IPv6 wildcard patterns
      "::", "::0"
    ]
}

/** Tracks wildcard hostname references through type propagation */
private DataFlow::TypeTrackingNode trackWildcardHost(DataFlow::TypeTracker typeTracker, string hostPattern) {
  (
    typeTracker.start() and
    exists(StringLiteral hostLiteral | 
      hostPattern = getWildcardHostPattern() and
      hostLiteral.getText() = hostPattern and
      result.asExpr() = hostLiteral
    )
  )
  or
  (
    exists(DataFlow::TypeTracker previousTracker | 
      result = trackWildcardHost(previousTracker, hostPattern).track(previousTracker, typeTracker)
    )
  )
}

/** Retrieves data flow nodes containing wildcard hostname references */
DataFlow::Node locateWildcardHostReference(string hostPattern) {
  trackWildcardHost(DataFlow::TypeTracker::end(), hostPattern).flowsTo(result)
}

/** Tracks address tuples containing wildcard hostnames as first element */
private DataFlow::TypeTrackingNode trackAddressTuple(DataFlow::TypeTracker typeTracker, string hostPattern) {
  (
    typeTracker.start() and
    result.asExpr() = any(Tuple addrTuple | 
      addrTuple.getElt(0) = locateWildcardHostReference(hostPattern).asExpr()
    )
  )
  or
  (
    exists(DataFlow::TypeTracker previousTracker | 
      result = trackAddressTuple(previousTracker, hostPattern).track(previousTracker, typeTracker)
    )
  )
}

/** Obtains data flow nodes representing address tuples with wildcard hostnames */
DataFlow::Node locateAddressTuple(string hostPattern) {
  trackAddressTuple(DataFlow::TypeTracker::end(), hostPattern).flowsTo(result)
}

/**
 * Identifies socket objects created with specific address families.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode socketBindCall, DataFlow::Node addressArg, string hostPattern
where
  socketBindCall = getSocketInstance().getMember("bind").getACall() and
  addressArg = socketBindCall.getArg(0) and
  addressArg = locateAddressTuple(hostPattern)
select socketBindCall.asExpr(), "Socket bound to all network interfaces via '" + hostPattern + "' configuration."