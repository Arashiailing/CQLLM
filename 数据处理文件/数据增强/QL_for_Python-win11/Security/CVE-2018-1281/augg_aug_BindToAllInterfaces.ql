/**
 * @name Socket bound to all network interfaces
 * @description Detects sockets bound to all network interfaces (0.0.0.0, ::, etc.),
 * which accept traffic from any IPv4/IPv6 address, creating security risks.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Returns hostnames representing binding to all network interfaces. */
private string universalBindingHost() {
  result in [
      // IPv4 representations
      "0.0.0.0", "",
      // IPv6 representations
      "::", "::0"
    ]
}

/** Tracks references to universal binding hostnames through data flow. */
private DataFlow::TypeTrackingNode universalHostReference(DataFlow::TypeTracker tracker, string host) {
  exists(StringLiteral hostLiteral |
    host = universalBindingHost() and
    hostLiteral.getText() = host and
    tracker.start() and
    result.asExpr() = hostLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker |
    result = universalHostReference(prevTracker, host).track(prevTracker, tracker)
  )
}

/** Gets data flow nodes containing universal binding host references. */
DataFlow::Node universalHostReference(string host) {
  universalHostReference(DataFlow::TypeTracker::end(), host).flowsTo(result)
}

/** Tracks address tuples containing universal hostnames as first element. */
private DataFlow::TypeTrackingNode universalAddressTuple(DataFlow::TypeTracker tracker, string host) {
  exists(Tuple addressTuple |
    tracker.start() and
    addressTuple.getElt(0) = universalHostReference(host).asExpr() and
    result.asExpr() = addressTuple
  )
  or
  exists(DataFlow::TypeTracker prevTracker |
    result = universalAddressTuple(prevTracker, host).track(prevTracker, tracker)
  )
}

/** Gets data flow nodes representing address tuples with universal hostnames. */
DataFlow::Node universalAddressTuple(string host) {
  universalAddressTuple(DataFlow::TypeTracker::end(), host).flowsTo(result)
}

/**
 * Gets a socket.socket instance object.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node socketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindMethodCall, DataFlow::Node addressArgument, string host
where
  // Identify socket.bind() method invocations
  bindMethodCall = socketInstance().getMember("bind").getACall() and
  // Extract the address argument (first parameter)
  addressArgument = bindMethodCall.getArg(0) and
  // Verify address contains universal binding hostname
  addressArgument = universalAddressTuple(host)
select bindMethodCall.asExpr(), "Socket bound to all interfaces using '" + host + "'"