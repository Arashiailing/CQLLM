/**
 * @name Socket binding to all network interfaces
 * @description Detects socket configurations bound to all network interfaces (0.0.0.0, ::, etc.),
 * which exposes services to any network source and creates significant security vulnerabilities.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Identifies wildcard hostnames representing all network interfaces */
private string getWildcardHostname() {
  result in [
      // IPv4 wildcards
      "0.0.0.0", "",
      // IPv6 wildcards
      "::", "::0"
    ]
}

/** Propagates wildcard hostname references through type tracking */
private DataFlow::TypeTrackingNode propagateHostnameReference(DataFlow::TypeTracker tracker, string hostname) {
  tracker.start() and
  exists(StringLiteral wildcardLiteral | hostname = getWildcardHostname() |
    wildcardLiteral.getText() = hostname and
    result.asExpr() = wildcardLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = propagateHostnameReference(prevTracker, hostname).track(prevTracker, tracker)
  )
}

/** Retrieves data flow nodes containing wildcard hostname references */
DataFlow::Node findHostnameReference(string hostname) {
  propagateHostnameReference(DataFlow::TypeTracker::end(), hostname).flowsTo(result)
}

/** Tracks address tuples containing wildcard hostnames as their first element */
private DataFlow::TypeTrackingNode propagateAddressTuple(DataFlow::TypeTracker tracker, string hostname) {
  tracker.start() and
  result.asExpr() = any(Tuple addressTuple | 
    addressTuple.getElt(0) = findHostnameReference(hostname).asExpr()
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = propagateAddressTuple(prevTracker, hostname).track(prevTracker, tracker)
  )
}

/** Obtains data flow nodes representing address tuples with wildcard hostnames */
DataFlow::Node findAddressTuple(string hostname) {
  propagateAddressTuple(DataFlow::TypeTracker::end(), hostname).flowsTo(result)
}

/**
 * Identifies socket objects created with specific address families.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node identifySocketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindInvocation, DataFlow::Node addressArg, string hostname
where
  bindInvocation = identifySocketInstance().getMember("bind").getACall() and
  addressArg = bindInvocation.getArg(0) and
  addressArg = findAddressTuple(hostname)
select bindInvocation.asExpr(), "Socket bound to all network interfaces via '" + hostname + "' configuration."