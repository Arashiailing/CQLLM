/**
 * @name Binding a socket to all network interfaces
 * @description Binding a socket to all interfaces exposes it to traffic from any IPv4/IPv6 address,
 *              creating significant security risks.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Returns hostnames that bind to all network interfaces (IPv4/IPv6) */
private string allInterfacesHostname() {
  result in [
      // IPv4 wildcards
      "0.0.0.0", "",
      // IPv6 wildcards
      "::", "::0"
    ]
}

/** Tracks references to hostnames that bind to all interfaces */
private DataFlow::TypeTrackingNode trackHostnameRef(DataFlow::TypeTracker tracker, string hostname) {
  tracker.start() and
  exists(StringLiteral hostnameLiteral | hostname = allInterfacesHostname() |
    hostnameLiteral.getText() = hostname and
    result.asExpr() = hostnameLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = trackHostnameRef(prevTracker, hostname).track(prevTracker, tracker)
  )
}

/** Returns data flow nodes containing references to all-interfaces hostnames */
DataFlow::Node allInterfacesHostnameRef(string hostname) {
  trackHostnameRef(DataFlow::TypeTracker::end(), hostname).flowsTo(result)
}

/** Tracks tuples containing all-interfaces hostnames as first element */
private DataFlow::TypeTrackingNode trackAddressTuple(DataFlow::TypeTracker tracker, string hostname) {
  tracker.start() and
  result.asExpr() = any(Tuple addressTuple | 
    addressTuple.getElt(0) = allInterfacesHostnameRef(hostname).asExpr()
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = trackAddressTuple(prevTracker, hostname).track(prevTracker, tracker)
  )
}

/** Returns data flow nodes containing tuples with all-interfaces hostnames */
DataFlow::Node allInterfacesAddressTuple(string hostname) {
  trackAddressTuple(DataFlow::TypeTracker::end(), hostname).flowsTo(result)
}

/**
 * Gets socket instances created with specific address families.
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node socketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindCallNode, DataFlow::Node bindAddressArg, string hostname
where
  bindCallNode = socketInstance().getMember("bind").getACall() and
  bindAddressArg = bindCallNode.getArg(0) and
  bindAddressArg = allInterfacesAddressTuple(hostname)
select bindCallNode.asExpr(), "Socket binds to all interfaces using '" + hostname + "'"