/**
 * @name Binding a socket to all network interfaces
 * @description Detects socket bindings to wildcard addresses (0.0.0.0/::), 
 * exposing services to all network interfaces and creating security risks.
 * @kind problem
 * @tags security
 *       external/cwe/cwe-200
 * @problem.severity error
 * @security-severity 6.5
 * @sub-severity low
 * @precision high
 * @id py/bind-socket-all-network-interfaces
 */

import python
import semmle.python.dataflow.new.DataFlow
import semmle.python.ApiGraphs

/** Returns wildcard hostnames that bind to all network interfaces */
private string getWildcardHostname() {
  result in [
      // IPv4 wildcards
      "0.0.0.0", "",
      // IPv6 wildcards
      "::", "::0"
    ]
}

/** Tracks wildcard hostname references through type propagation */
private DataFlow::TypeTrackingNode trackHostnameFlow(DataFlow::TypeTracker tracker, string host) {
  tracker.start() and
  exists(StringLiteral hostLiteral | host = getWildcardHostname() |
    hostLiteral.getText() = host and
    result.asExpr() = hostLiteral
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = trackHostnameFlow(prevTracker, host).track(prevTracker, tracker)
  )
}

/** Gets data flow nodes containing wildcard hostname references */
DataFlow::Node getHostnameNode(string host) {
  trackHostnameFlow(DataFlow::TypeTracker::end(), host).flowsTo(result)
}

/** Tracks address tuples containing wildcard hostnames as first element */
private DataFlow::TypeTrackingNode trackAddressTupleFlow(DataFlow::TypeTracker tracker, string host) {
  tracker.start() and
  result.asExpr() = any(Tuple addrTuple | 
    addrTuple.getElt(0) = getHostnameNode(host).asExpr()
  )
  or
  exists(DataFlow::TypeTracker prevTracker | 
    result = trackAddressTupleFlow(prevTracker, host).track(prevTracker, tracker)
  )
}

/** Gets data flow nodes containing address tuples with wildcard hostnames */
DataFlow::Node getAddressTupleNode(string host) {
  trackAddressTupleFlow(DataFlow::TypeTracker::end(), host).flowsTo(result)
}

/**
 * Gets socket instances created with specific address families.
 * 
 * Reference: https://docs.python.org/3/library/socket.html
 */
API::Node getSocketInstance() { 
  result = API::moduleImport("socket").getMember("socket").getReturn() 
}

from DataFlow::CallCfgNode bindCall, DataFlow::Node addressArg, string host
where
  bindCall = getSocketInstance().getMember("bind").getACall() and
  addressArg = bindCall.getArg(0) and
  addressArg = getAddressTupleNode(host)
select bindCall.asExpr(), "Socket bound to all interfaces using '" + host + "'."